#!/usr/bin/env bash
VERSION="v2.0.1-0"

## Helper script to establish a QMUX connection. Once the connection is established
## a file named "ip-session-qmimuxX" is created with several information like:
##
##   - IP, Gateway, DNS to configure the routing
##   - HANDLE and CID to close the connection
##
## usage: tqmi-connect [options]
##
## examples:
##
##     Establish a network connection on qmimux with mux-id 1
##     $ tqmi-connect -d /dev/cdc-wdm0 --connect --apn web.omnitel.it --iface wwan0 --muxid 112
##
##     Establish a network connection creating a 3gpp profile
##     $ tqmi-connect -d /dev/cdc-wdm0 --connect --profile --apn mobile.vodafone.it --iface wwan0 --muxid 113
##
##     Release a network connection
##     $ tqmi-connect -d /dev/cdc-wdm0 --release --iface qmimux0
##
## options:
##    -d, --device <path>
##    -c, --connect
##    -r, --release
##    -a, --apn <string>
##    -i, --iface <string>  [default: wwan0]
##    -m, --muxid <number>, valid numbers 112 and 113 [default: 112]
##    -p, --ip_type <number> [default: 4]
##    -u, --mtu <number> [default: 16384]
##    -t, --table <string> [default: main]
##    -v, --verbose
##    -x, --profile

info() {
    echo "[+] $@"
}

err() {
    echo "[!] $@"
}


# CLInt GENERATED_CODE: start
# Default values
_iface=wwan0
_muxid=112
_ip_type=4
_mtu=16384
_table=main

# No-arguments is not allowed
[ $# -eq 0 ] && sed -ne 's/^## \(.*\)/\1/p' $0 && exit 1

# Converting long-options into short ones
for arg in "$@"; do
  shift
  case "$arg" in
"--device") set -- "$@" "-d";;
"--connect") set -- "$@" "-c";;
"--release") set -- "$@" "-r";;
"--apn") set -- "$@" "-a";;
"--iface") set -- "$@" "-i";;
"--muxid") set -- "$@" "-m";;
"--ip_type") set -- "$@" "-p";;
"--mtu") set -- "$@" "-u";;
"--table") set -- "$@" "-t";;
"--verbose") set -- "$@" "-v";;
"--profile") set -- "$@" "-x";;
  *) set -- "$@" "$arg"
  esac
done

function print_illegal() {
    echo Unexpected flag in command line \"$@\"
}

# Parsing flags and arguments
while getopts 'hcrvxd:a:i:m:p:u:t:' OPT; do
    case $OPT in
        h) sed -ne 's/^## \(.*\)/\1/p' $0
           exit 1 ;;
        c) _connect=1 ;;
        r) _release=1 ;;
        v) _verbose=1 ;;
        x) _profile=1 ;;
        d) _device=$OPTARG ;;
        a) _apn=$OPTARG ;;
        i) _iface=$OPTARG ;;
        m) _muxid=$OPTARG ;;
        p) _ip_type=$OPTARG ;;
        u) _mtu=$OPTARG ;;
        t) _table=$OPTARG ;;
        \?) print_illegal $@ >&2;
            echo "---"
            sed -ne 's/^## \(.*\)/\1/p' $0
            exit 1
            ;;
    esac
done
# CLInt GENERATED_CODE: end

if [[ $EUID != 0 ]]; then
    err "run as root"
    exit 1
fi

# Check inputs
if [[ -z $_device ]]; then
    err "--device flag is mandatory"
    echo "---"
    sed -ne 's/^## \(.*\)/\1/p' $0
    exit 1
fi
if [[ ! $_muxid -gt 0 ]]; then
    err "mux-id must be > 0"
    exit 1
fi
_cid=0
_qmimux=

# Error management
STAGE_START=1   # before setting qmimux
STAGE_QMIMUX=2  # after qmimux, before start network
STAGE_START_NETWORK=3   # after start network
STAGE_END=4     # successful end
_stage=$STAGE_START
#trap catch_interrupt INT
#trap catch_err ERR
trap catch_exit EXIT
catch_exit() {
    # We can not delete the profile if we want double connection, so just notify the user
    # to do it manually in a nice way.
    [[ -n $_profile ]] && [[ $_cid != "0" ]] &&how_to_delete_profile

    # Script ended successfully, nothing to do
    [[ $_stage = $STAGE_END ]] && exit 0

    # Clean ups
    [[ $_stage -ge $STAGE_QMIMUX ]] && remove_qmux $_iface $_qmimux $_muxid
    [[ $_stage -ge $STAGE_START_NETWORK ]] && wds_stop_network
    err "Connection failed! Look logs above for more info"
    exit 1
}

[ ! -z $_verbose ] && verbose="--verbose "

mask2cdr () {
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}

exe() {
    cmd="$1"
    echo "[>] $cmd"
    output=`$cmd`
    local errcode=$?
    [[ -n "$output" ]] && echo "[<] $output"
    [[ $errcode != "0" ]] && exit 1
    return $errcode
}

add_qmux_manually() {
    # For qmicli without link-management
    local iface=$1
    local mux_id=$2
    # The qmimux label (e.g. qmimux0) is expected to be created incrementally,
    # so if there are N qmimux already (e.g. 2: qmimux0, qmimux1),
    # the new one should be qmimuxN (e.g. qmimux2)
    qmimux_count=$(cat /sys/class/net/$iface/qmi/add_mux | wc -l)
    _qmimux=qmimux$qmimux_count
    info "echo $mux_id > /sys/class/net/$iface/qmi/add_mux"
    echo $mux_id > /sys/class/net/$iface/qmi/add_mux
    if [[ $? != 0 ]]; then
        err "Could not create qmimux"
        exit 1
    fi
}

add_qmux_via_qmicli() {
    local iface=$1
    local mux_id=$2
    cmd="qmicli -p -d $_device --link-add=iface=$iface,mux-id=$mux_id"
    echo "[>] $cmd"
    output=`$cmd`
    echo "$output"
    if [[ $(echo "$output" | grep successfully | wc -l) == "0" ]]; then
        err "could not add qmux"
        exit 1
    fi
    _qmimux=$(echo "$output" | grep "iface name" | cut -d":" -f2)
    _qmimux=${_qmimux:1}  # removing leading whitespace
    if [[ -z $_qmimux ]]; then
        err "could not get qmimux iface name"
        exit 1
    fi
}

add_qmux() {
    local iface=$1
    local mux_id=$2

    info "Creating qmux with id $mux_id"
    curr_mux_id=$(cat /sys/class/net/$_iface/qmi/add_mux | grep $mux_id | wc -l)
    if [[ $curr_mux_id != "0" ]]; then
        # We can not get the qmimux associated with a given mux-id, so we exit
        # with an error message if the required mux-id is already in use
        err "mux-id 0x$_muxid is already in use."
        err "Please, select a different mux-id, or remove them all before trying again."
        exit 1
    fi

    has_link_add=$(qmicli --help-link-management 2>/dev/null | grep link-add | wc -l)
    if [[ $has_link_add == "0" ]]; then
        add_qmux_manually $iface $mux_id
    else
        add_qmux_via_qmicli $iface $mux_id
    fi
    if [[ -z $_qmimux ]]; then
        err "Could not create qmimux"
        exit 1
    fi

    info "$_qmimux created"
    _stage=$STAGE_QMIMUX
}

remove_qmux_manually() {
    # Get the mux-id either from the CLI via --muxid or from the ip-session
    # configuration file.
    local iface=$1
    local mux_id=$2
    info "echo $mux_id > /sys/class/net/$iface/qmi/del_mux"
    echo $mux_id > /sys/class/net/$iface/qmi/del_mux
    if [[ $? != 0 ]]; then
        err "Could not remove qmimux"
        exit 1
    fi
}

remove_qmux_via_qmicli() {
    local qmux_iface=$1
    local mux_id=$2
    exe "qmicli -p -d $_device --link-delete=link-iface=$qmux_iface,mux-id=$mux_id"
}

remove_qmux() {
    local iface=$1
    local qmux_iface=$2
    local mux_id=$3

    info "deleting mux-id $mux_id"
    has_link_delete=$(qmicli --help-link-management 2>/dev/null | grep "link-delete=" | wc -l)
    if [[ $has_link_delete == "0" ]]; then
        remove_qmux_manually $iface $mux_id
    else
        remove_qmux_via_qmicli $qmux_iface $mux_id
    fi
}

configure_iface() {
    info "configure parent network interface"
    exe "ip link set $_iface down"
    exe "qmicli -p -d $_device --wda-set-data-format=link-layer-protocol=802-3"

    info "Setting data format..."
    exe "qmicli -p -d $_device --set-expected-data-format=raw-ip"
    exe "qmicli -p -d $_device --wda-set-data-format=link-layer-protocol=raw-ip,ul-protocol=qmap,dl-protocol=qmap,dl-max-datagrams=32,dl-datagram-max-size=$_mtu"
}

dms_get_model() {
    info "Getting modem model..."
    cmd="qmicli -p -d $_device --dms-get-model"
    set +e
    while true; do
        exe "$cmd"
        check=$(echo "$output" | grep "Device model retrieved" | wc -l)
        if [[ $check == 0 ]]; then
            echo -n "."
            sleep 1
            continue
        fi
        break
    done
    FN980_QUIRK=$(echo "$output" | grep FN980 | wc -l)
    if [[ $FN980_QUIRK == 1 ]]; then
        info "FN980 modem detected, start-network with profile ID"
        _profile=1
    fi
}

dms_get_software_version() {
info "Getting software version..."
    cmd="qmicli -p -d $_device --dms-get-software-version"
    while true; do
        exe "$cmd"
        check=$(echo "$output" | grep "Software version" | wc -l)
        if [[ $check == 0 ]]; then
            echo -n "."
            sleep 1
            continue
        fi
        break
    done
}

nas_get_home_network() {
    info "Checking Network"
    cmd="qmicli -p -d $_device --nas-get-home-network"
    exe "$cmd"
    check=$(echo "$output" | grep "Successfully got home network" | wc -l)
    if [[ $check == 0 ]]; then
        err "Modem is not connected to the Home network"
        exit 1
    fi
}

nas_get_signal_strength() {
    info "Checking Signal strength"
    cmd="qmicli -p -d $_device --nas-get-signal-strength"
    exe "$cmd"

}

wds_get_client_id() {
    if [[ "$_cid" == 0 ]]; then
        cmd="qmicli $verbose -p -d $_device --wds-noop --client-no-release-cid"
        exe "$cmd"
        _cid=$(echo "$output" | sed -n "s_\s*CID: '\([0-9]*\)'_\1_p")
    fi
}

wds_bind_mux_data_port() {
    info "Binding mux data port \"$_muxid\""
    exe "qmicli -p -d $_device --wds-bind-mux-data-port=mux-id=${_muxid},ep-iface-number=2 --client-no-release-cid --client-cid=$_cid"
}

wds_create_profile_id() {
    if [[ "$_ip_type" == 4 ]]; then
        _pdp_type="IP"
    else if [[ "$_ip_type" == 6 ]]; then
            _pdp_type="IPV6"
        else
            _pdp_type="IPV4V6"
        fi
    fi
    cmd="qmicli $verbose -p -d "$_device" --wds-create-profile=3gpp,apn=$_apn,pdp-type=$_pdp_type --client-no-release-cid --client-cid=$_cid"
    exe "$cmd"
    _profile_id=$(echo "$output" | sed -n "s_\s*Profile index: '\([0-9]*\)'_\1_p")
}

wds_start_network() {
    if [[ -z "$_profile" ]]; then
        cmd="qmicli $verbose -p -d "$_device" --wds-start-network=apn=$_apn,ip-type=$_ip_type --client-no-release-cid --client-cid=$_cid"
    else
        cmd="qmicli $verbose -p -d "$_device" --wds-start-network=3gpp-profile=$_profile_id --client-no-release-cid --client-cid=$_cid"
    fi
    exe "$cmd"
    check=$(echo "$output" | grep "Network started" | wc -l)
    if [[ $check == 0 ]]; then
        err "start network failed"
        exit 1
    fi
    _handle=$(echo "$output" | sed -n "s_\s*Packet data handle: '\([0-9]*\)'_\1_p")
    _stage=$STAGE_START_NETWORK
}

save_configuration_to_file() {
    info "saving IP configuration"
    cmd="qmicli $verbose -p -d $_device --wds-get-current-settings --client-no-release-cid --client-cid=$_cid"
    exe "$cmd"

    ip=$(echo "$output" | sed -n "s/IPv4 address: \([0-9\./]*\)/\1/p" $FILE | sed -n "s/\s*//p")
    gw=$(echo "$output" | sed -n "s/IPv4 gateway address: \([0-9\.]*\)/\1/p" $FILE | sed -n "s/\s*//p")
    netmask=$(echo "$output" | sed -n "s/IPv4 subnet mask: \([0-9\.]*\)/\1/p" $FILE | sed -n "s/\s*//p")
    network=$(mask2cdr $netmask)

    dns1=$(echo "$output" | sed -n "s/IPv4 primary DNS: \([0-9\./]*\)/\1/p" $FILE | sed -n "s/\s*//p")
    dns2=$(echo "$output" | sed -n "s/IPv4 secondary DNS: \([0-9\./]*\)/\1/p" $FILE | sed -n "s/\s*//p")

    OUT=ip-session-$_qmimux
    [[ -f "$OUT" ]] && rm "$OUT"

    echo "HANDLE=$_handle"      >> $OUT
    echo "CID=$_cid"            >> $OUT
    echo "IFACE=$_iface"        >> $OUT
    echo "QMUX_IFACE=$_qmimux"  >> $OUT
    echo "MUX_ID=$_muxid"       >> $OUT
    echo "IP=$ip"               >> $OUT
    echo "GW=$gw"               >> $OUT
    echo "NETMASK=$netmask"     >> $OUT
    echo "DNS1=$dns1"           >> $OUT
    echo "DNS2=$dns2"           >> $OUT
    echo "CDR=$network"         >> $OUT
    echo "TABLE=$_table"        >> $OUT
    info "ip configuration saved in $OUT"
}

how_to_delete_profile() {
    info "Delete profile $_profile_id with the following command:"
    cmd="qmicli $verbose -p -d "$_device" --wds-delete-profile=3gpp,$_profile_id --client-no-release-cid --client-cid=$_cid"
    info "$cmd"
    # unset profile_id to prevent future attempts to print this message again.
    _profile_id=
}

check_connection_status() {
    cmd="qmicli -p -d $_device --wds-get-packet-service-status --client-no-release-cid --client-cid=$_cid"
    echo $cmd
    output=$($cmd)
    if [[ $? != 0 ]]; then
        exit 1
    fi
    echo "$output" | grep "Connection status:"
}

set_network_address() {
    # Network interface needs to be set up after start-network
    info "Setting network address"
    exe "ip addr add $ip/$network dev $_qmimux"

    info "Setting $_iface up"
    exe "ip link set $_iface up"
}

wds_stop_network() {
    local cid=${CID:-$_cid}
    local handle=${HANDLE:-$_handle}
    info "Stop network"
    cmd="qmicli -p -d $_device --wds-stop-network=$handle --client-cid=$cid"
    echo "[>] $cmd"
    output=`$cmd 2>&1`
    local errcode=$?
    echo "$output"
    if [[ $(echo "$output" | grep "NoEffect" | wc -l) == "1" ]]; then
        info "ignoring NoEffect error"
    else if [[ $errcode != 0 ]]; then
        err "errorcode $errcode"
        exit 1
    fi
    fi
}

release() {
    configuration="ip-session-$_iface"
    source $configuration
    wds_stop_network
    info "set $IFACE down"
    exe "ip link set $IFACE down"
    info "Unlink $QMUX_IFACE"
    remove_qmux $IFACE $QMUX_IFACE $MUX_ID
    info "Deleting '$configuration' configuration file."
    exe "rm $configuration"
}

info "tqmi-connect:" $VERSION
info "qmicli version: $(qmicli --version)"

if [[ -z $_release ]] && [[ -z $_connect ]]; then
    err "No command given! Either use --connect or --release"
fi

if [[ ! -z $_release ]]; then
    release
fi

if [[ ! -z $_connect ]]; then
    dms_get_model
    dms_get_software_version
    configure_iface
    add_qmux $_iface $_muxid
    nas_get_home_network
    nas_get_signal_strength
    wds_get_client_id
    wds_bind_mux_data_port
    [[ ! -z $_profile ]] && wds_create_profile_id
    wds_start_network
    check_connection_status
    save_configuration_to_file
    set_network_address

    info "################################################################"
    info "$_qmimux interface configured. The network is currently DOWN"

    info "Before configuring the routing for $_qmimux, remember to"
    info "bring it up (e.g. ip link set $_qmimux up)"
    info "################################################################"
fi

_stage=$STAGE_END
